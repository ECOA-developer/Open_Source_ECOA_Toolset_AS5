PosixAPOSBindWriterC.SendMessageNB_Header=\
void Send_Message_Non_Blocking\n\
\   (int              vc_id,\n\
\    void             *Msg_Buffer,\n\
\    int              Msg_Length,\n\
\    SMNB_Status_Type *Status);\n 

PosixAPOSBindWriterC.SendMessageNB_BodyDecl=\
void Send_Message_Non_Blocking\n\
\   (int              vc_id,\n\
\    void             *Msg_Buffer,\n\
\    int              Msg_Length,\n\
\    SMNB_Status_Type *Status)\n 


PosixAPOSBindWriterC.ReceiveMessage_Header=\
void Receive_Message\n\
\   (int            VC_ID,\n\
\    void           *Msg_Buffer,\n\
\    int            Msg_Length_Available,\n\
\    Time_Type      Timeout,\n\
\    int            *Msg_Length,\n\
\    RM_Status_Type *Status);\n

PosixAPOSBindWriterC.ReceiveMessage_BodyDecl=\
void Receive_Message\n\
\   (int            VC_ID,\n\
\    void           *Msg_Buffer,\n\
\    int            Msg_Length_Available,\n\
\    Time_Type      Timeout,\n\
\    int            *Msg_Length,\n\
\    RM_Status_Type *Status)\n

PosixAPOSBindWriterC.WaitForEvent_Header=\
void Wait_For_Event\n\
\   (Event_Type      *Event,\n\
\    unsigned int    *Event_Info,\n\
\    WFE_Status_Type *Status);\n

PosixAPOSBindWriterC.WaitForEvent_Body=\
void Wait_For_Event\n\
\   (Event_Type      *Event,\n\
\    unsigned int    *Event_Info,\n\
\    WFE_Status_Type *Status)\n\
{\n\
\   /* TODO - Should probably put a lock on this call as it should only be called by a single thread! */\n\
\n\
\   Receive_Message_Queue_Status_Type RMQ_Status;\n\
\   int timerIDQueueEntry;\n\
\n\
\   /* Block on message queue */\n\
\   Receive_Message_Queue(Wait_For_Event__QueueID,\n\
\      (void *)&timerIDQueueEntry,\n\
\       sizeof(timerIDQueueEntry),\n\
\       &RMQ_Status);\n\
\n\
\   if (RMQ_Status == Receive_Message_Queue_OK)\n\
\   {\n\
\      *Event = Event_Timer;\n\
\      *Event_Info = timerIDQueueEntry;\n\
\      *Status = Wait_For_Event_OK;\n\
\   }\n\
\   else\n\
\   {\n\
\      *Status = Wait_For_Event_Failed;\n\
\   }\n\
}\n\
\n

PosixAPOSBindWriterC.CreateThread_Header=\
void Create_Thread\n\
\   (Thread_Attr_Type *Thread_Attr,\n\
\    void (*Entry_Point)(),\n\
\    void *Argument,\n\
\    int *Thread_ID,\n\
\    Create_Thread_Status_Type *Status);\n 

PosixAPOSBindWriterC.CreateThread_Body=\
void Create_Thread\n\
\   (Thread_Attr_Type *Thread_Attr,\n\
\    void (*Entry_Point)(),\n\
\    void *Argument,\n\
\    int *Thread_ID,\n\
\    Create_Thread_Status_Type *Status)\n\
{\n\
\   int status, policy;\n\
\   pthread_t thread;\n\
\   pthread_attr_t attr;\n\
\   struct sched_param param;\n\
\n\
\   status = pthread_attr_init(&attr);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_attr_init\\n\", status);\n\
\n\
\   status = pthread_attr_setstacksize(&attr, (size_t)Thread_Attr->Stack_Size);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_attr_setstacksize\\n\", status);\n\
\n\
\   status = pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_attr_setschedpolicy\\n\", status);\n\
\n\
\   status = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_attr_setinheritsched\\n\", status);\n\
\n\
\   param.sched_priority = Scale_ThreadPriority(Thread_Attr->Sched_Priority, SCHED_FIFO);\n\
\   status = pthread_attr_setschedparam(&attr, &param);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_attr_setschedparam\\n\", status);\n\
\n\
\   status = pthread_create(&thread, &attr, (void *(*)(void *))Entry_Point, Argument);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_create\\n\", status);\n\
\n\
\   status = pthread_attr_destroy(&attr);\n\
\   if (status != 0)\n\
\      printf(\"ERROR %d - pthread_attr_destroy\\n\", status);\n\
\n\
\}\n\
\n 

PosixAPOSBindWriterC.ExitThread_Header=\
void Exit_Thread\n\
\   (int Termination_Value);\n

PosixAPOSBindWriterC.ExitThread_Body=\
void Exit_Thread\n\
\   (int Termination_Value)\n\
{\n\
\   pthread_exit(&Termination_Value);\n\
}\n\
\n

PosixAPOSBindWriterC.CreateSemaphore_Header=\
void Create_Semaphore\n\
\   (int Init_Value,\n\
\    int Max_Value,\n\
\    Queuing_Discipline_Type Queuing_Discipline,\n\
\    int *Semaphore_ID,\n\
\    Create_Semaphore_Status_Type *Status);\n

PosixAPOSBindWriterC.CreateSemaphore_Body=\
void Create_Semaphore\n\
\   (int Init_Value,\n\
\    int Max_Value,\n\
\    Queuing_Discipline_Type Queuing_Discipline,\n\
\    int *Semaphore_ID,\n\
\    Create_Semaphore_Status_Type *Status)\n\
{\n\
\  int status;\n\
\  status = sem_init(&mutexes[mutindex], 0, Init_Value);\n\
\  if(status != 0)\n\
\    printf(\"ERROR %d - sem_init\\n\", errno);\n\
\n\
\  *Semaphore_ID = mutindex++;\n\
\n\
\  *Status = Create_Semaphore_OK;\n\
}\n\
\n

PosixAPOSBindWriterC.WaitForSemaphore_Header=\
void Wait_For_Semaphore\n\
\   (int Semaphore_ID,\n\
\    Time_Type *Timeout,\n\
\    Wait_For_Semaphore_Status_Type *Status);\n

PosixAPOSBindWriterC.WaitForSemaphore_Body=\
void Wait_For_Semaphore\n\
\   (int Semaphore_ID,\n\
\    Time_Type *Timeout,\n\
\    Wait_For_Semaphore_Status_Type *Status)\n\
{\n\
\   int status;\n\
\   if (Timeout->Seconds == MAX_SECONDS && Timeout->Nanoseconds == MAX_NANOSECONDS )\n\
\   {\n\
\      status = sem_wait(&mutexes[Semaphore_ID]);\n\
\      if (status != 0)\n\
\      {\n\
\         printf(\"ERROR %d - sem_wait\\n\", errno);\n\
\         *Status = WFSError();\n\
\      }\n\
\      else\n\
\      {\n\
\         *Status = Wait_For_Semaphore_OK;\n\
\      }\n\
\   }\n\
\   else\n\
\   {\n\
\      struct timespec absTimeout, now;\n\
\      clock_gettime(CLOCK_REALTIME, &now);\n\
\      absTimeout.tv_sec  = now.tv_sec  + Timeout->Seconds;\n\
\      absTimeout.tv_nsec = now.tv_nsec + Timeout->Nanoseconds;\n\
\      while (absTimeout.tv_nsec >= 1000000000)\n\
\      {\n\
\         absTimeout.tv_nsec -= 1000000000;\n\
\         absTimeout.tv_sec  += 1;\n\
\      }\n\
\n\
\      status = sem_timedwait(&mutexes[Semaphore_ID], &absTimeout);\n\
\      if (status != 0 )\n\
\      {\n\
\         printf(\"ERROR %d - sem_timedwait\\n\", errno);\n\
\         *Status = WFSError();\n\
\      }\n\
\      else\n\
\      {\n\
\         *Status = Wait_For_Semaphore_OK;\n\
\      }\n\
\  }\n\
}\n\
\n

PosixAPOSBindWriterC.PostSemaphore_Header=\
void Post_Semaphore\n\
\   (int Semaphore_ID,\n\
\    Post_Semaphore_Status_Type *Status);\n

PosixAPOSBindWriterC.PostSemaphore_Body=\
void Post_Semaphore\n\
\   (int Semaphore_ID,\n\
\    Post_Semaphore_Status_Type *Status)\n\
{\n\
\   int status;\n\
\   status = sem_post(&mutexes[Semaphore_ID]);\n\
\   if (status != 0)\n\
\   {\n\
\      printf(\"ERROR %d - sem_post\\n\", errno);\n\
\   }\n\
\   *Status = Post_Semaphore_OK;\n\
\}\n\
\n

PosixAPOSBindWriterC.DeleteSemaphore_Header=\
void Delete_Semaphore\n\
\   (int Semaphore_ID,\n\
\    Delete_Semaphore_Status_Type *Status);\n

PosixAPOSBindWriterC.DeleteSemaphore_Body=\
void Delete_Semaphore\n\
\   (int Semaphore_ID,\n\
\    Delete_Semaphore_Status_Type *Status)\n\
{\n\
\   *Status = Delete_Semaphore_Invalid_Semaphore_ID;\n\
}\n\
\n

PosixAPOSBindWriterC.CreateTimer_Header=\
void Create_Timer\n\
\   (Time_Type                Time,\n\
\    int                      *Timer_ID,\n\
\    Create_Timer_Status_Type *Status);\n

PosixAPOSBindWriterC.CreateTimer_Body=\
void Create_Timer\n\
\   (Time_Type                Time,\n\
\    int                      *Timer_ID,\n\
\    Create_Timer_Status_Type *Status)\n\
{\n\
\   int i, timerAdded = 0;\n\
\   static int maxUsedTimerID = 0;\n\
\n\
\   // Find a free slot in the timerList\n\
\   for (i = 0; i <= TIMER_LIST_SIZE; i++)\n\
\   {\n\
\      if (timerList[i].timerID == 0)\n\
\      {\n\
\         struct itimerspec time;\n\
\         time.it_value.tv_sec = Time.Seconds;\n\
\         time.it_value.tv_nsec = Time.Nanoseconds;\n\
\         time.it_interval.tv_sec = 0;\n\
\         time.it_interval.tv_nsec = 0;\n\
\n\
\         // Set the time value as this is needed in Start_Timer\n\
\         timerList[i].time = time;\n\
\n\
\         struct sigevent sigEv;\n\
\n\
\         sigEv.sigev_notify = SIGEV_SIGNAL;\n\
\         sigEv.sigev_signo = SIGRTMIN;\n\
\         sigEv.sigev_value.sival_ptr = &(timerList[i].timerID);\n\
\n\
\         if (timer_create(CLOCK_REALTIME, &sigEv, &(timerList[i].timerID)) == -1)\n\
\         {\n\
\            printf(\"Create_Timer %d (0x%lx) failed - errno = %d\\n\", i, (long)(timerList[i].timerID), errno);\n\
\            timerList[i].timerID = 0; /* Vacate the premises */\n\
\            *Status = Create_Timer_Resource_Not_Available;\n\
\            *Timer_ID = -1;\n\
\         }\n\
\         else\n\
\         {\n\
\//          printf(\"Create_Timer %d success - id = 0x%lx\\n\", i, (long)(timerList[i].timerID));\n\
\            /* return the intdex into the list as the timer id - as this is platform independent */\n\
\            *Timer_ID = i;\n\
\            *Status = Create_Timer_OK;\n\
\            timerAdded = 1;\n\
\            if( i > maxUsedTimerID ) maxUsedTimerID = i;\n\
\//          printf( \"Create_Timer max. used APOS TimerID = %d\\n\", maxUsedTimerID );\n\
\            break;\n\
\         }\n\
\      }\n\
\   }\n\
\n\
\   /* Check the timer was added to the list... */\n\
\   if (!timerAdded)\n\
\   {\n\
\      printf(\"failed to add timer %d to timerList\\n\", *Timer_ID);\n\
\      *Timer_ID = 0;\n\
\      *Status = Create_Timer_Resource_Not_Available;\n\
\   }\n\
\   else\n\
\   {\n\
\      sched_yield();/* Software implemented timers may need a chance to get going... */\n\
\   }\n\
}\n\
\n
            
PosixAPOSBindWriterC.StartTimer_Header=\
void Start_Timer\n\
\   (int                      Timer_ID,\n\
\    Start_Timer_Status_Type *Status);\n

PosixAPOSBindWriterC.StartTimer_Body=\
void Start_Timer\n\
\   (int                      Timer_ID,\n\
\    Start_Timer_Status_Type *Status)\n\
{\n\
\   timerListItemType *timerListItem;\n\
\n\
\   /* The timer ID is the index into the timerList! */\n\
\   timerListItem = &timerList[Timer_ID];\n\
\n\
\   /* Start the timer */\n\
\   if (timer_settime(timerListItem->timerID, 0, &timerListItem->time, NULL) == -1)\n\
\   {\n\
\      printf(\"Start_Timer %d (0x%lx) failed - errno = %d\\n\", Timer_ID, (long)(timerListItem->timerID), errno);\n\
\      *Status = Start_Timer_Failed;\n\
\   }\n\
\   else\n\
\   {\n\
\//    printf(\"Start_Timer %d (0x%lx) success\\n\", Timer_ID, (long)(timerListItem->timerID));\n\
\      *Status = Start_Timer_OK;\n\
\   }\n\
}\n\
\n
            
PosixAPOSBindWriterC.StopTimer_Header=\
void Stop_Timer\n\
\   (int                     Timer_ID,\n\
\    Stop_Timer_Status_Type *Status);\n

PosixAPOSBindWriterC.StopTimer_Body=\
void Stop_Timer\n\
\   (int                     Timer_ID,\n\
\    Stop_Timer_Status_Type *Status)\n\
{\n\
\   struct itimerspec newVal;\n\
\   timerListItemType *timerListItem;\n\
\n\
\   /* The timer ID is the index into the timerList! */\n\
\   timerListItem = &timerList[Timer_ID];\n\
\n\
\   newVal.it_value.tv_sec = 0;\n\
\   newVal.it_value.tv_nsec = 0;\n\
\   newVal.it_interval.tv_sec = 0;\n\
\   newVal.it_interval.tv_nsec = 0;\n\
\n\
\   if (timer_settime(timerListItem->timerID, 0, &newVal, NULL) == -1)\n\
\   {\n\
\      printf(\"Stop_Timer %d (0x%lx) failed - errno = %d\\n\", Timer_ID, (long)(timerListItem->timerID), errno);\n\
\      *Status = Stop_Timer_Failed;\n\
\   }\n\
\   else\n\
\   {\n\
\//    printf(\"Stop_Timer %d (0x%lx) success\\n\", Timer_ID, (long)(timerListItem->timerID));\n\
\      *Status = Stop_Timer_OK;\n\
\   }\n\
\}\n\
\n

PosixAPOSBindWriterC.DeleteTimer_Header=\
void Delete_Timer\n\
\   (int                      Timer_ID,\n\
\    Delete_Timer_Status_Type *Status);\n

PosixAPOSBindWriterC.DeleteTimer_Body=\
void Delete_Timer\n\
\   (int                      Timer_ID,\n\
\    Delete_Timer_Status_Type *Status)\n\
\{\n\
\   timerListItemType *timerListItem;\n\
\n\
\   /* The timer ID is the index into the timerList! */\n\
\   timerListItem = &timerList[Timer_ID];\n\
\n\
\   if (timer_delete(timerListItem->timerID) == -1)\n\
\   {\n\
\      printf(\"Delete_Timer %d (0x%lx) failed - errno = %d\\n\", Timer_ID, (long)(timerListItem->timerID), errno);\n\
\      *Status = Delete_Timer_Invalid_Timer;\n\
\   }\n\
\   else\n\
\   {\n\
\//    printf(\"Delete_Timer %d (0x%lx) success\\n\", Timer_ID, (long)(timerListItem->timerID));\n\
\      timerListItem->timerID = 0;\n\
\      *Status = Delete_Timer_OK;\n\
\   }\n\
\}\n\
\n
            
PosixAPOSBindWriterC.CreateRxSocket_Body=\
void create_rx_socket(int *sock, int portNo)\n\
{\n\
\   /* TODO - this is a fudge, but lose messages without it */\n\
\   int Size = (65507 + 1500) * 6;\n\
\   struct sockaddr_in address;\n\
\n\
\   *sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\
\   if (*socket < 0)\n\
\   {\n\
\      printf(\"Error creating socket - errno = %d\\n\", errno);\n\
\      exit(0);\n\
\   }\n\
\n\
\   /* TODO - this is a fudge, but lose messages without it */\n\
\   if (setsockopt(*sock, SOL_SOCKET, SO_RCVBUF, &Size, sizeof(Size)) < 0)\n\
\      printf(\"failed set size for socket\\n\");\n\
\n\
\   memset(&address, 0, sizeof(address));        // Clear the data structure to zero\n\
\   address.sin_family = AF_INET;                // Set Internet Socket (sin), Family to: Address Family (AF) IPv4 (INET)\n\
\   address.sin_addr.s_addr = htonl(INADDR_ANY); // Set Internet Socket (sin), Address to: all local interfaces\n\
\   address.sin_port = htons(portNo);            // Set Internet Socket (sin), Port to receive on\n\
\n\
\   // Bind our open socket to a free port on the localhost, with our defined IP address\n\
\   if (bind(*sock, (struct sockaddr *)&address, sizeof(address))==-1)\n\
\   {\n\
\      printf(\"Bind failed\\n\");\n\
\      exit(0);\n\
\   }\n\
}\n\
\n

PosixAPOSBindWriterC.CreateMulticastRxSocket_Body=\
void create_rx_socket(int *sock, int portNo, ECOA__boolean8 isMulticast, char *addr)\n\
{\n\
\   /* Required for multicast */\n\
\   struct ip_mreq imreq;\n\
\   int reuse = 1;\n\
\   int ttl = 3;\n\
\n\
\   /* TODO - this is a fudge, but lose messages without it */\n\
\   int Size = (65507 + 1500) * 6;\n\
\   struct sockaddr_in address;\n\
\n\
\   *sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\
\   if (*socket < 0)\n\
\   {\n\
\      printf(\"Error creating socket - errno = %d\\n\", errno);\n\
\      exit(0);\n\
\   }\n\
\n\
\   /* TODO - this is a fudge, but lose messages without it */\n\
\   if (setsockopt(*sock, SOL_SOCKET, SO_RCVBUF, &Size, sizeof(Size)) < 0)\n\
\      printf(\"failed set size for socket\\n\");\n\
\n\
\   memset(&address, 0, sizeof(address));        // Clear the data structure to zero\n\
\   address.sin_family = AF_INET;                // Set Internet Socket (sin), Family to: Address Family (AF) IPv4 (INET)\n\
\   address.sin_addr.s_addr = htonl(INADDR_ANY); // Set Internet Socket (sin), Address to: all local interfaces\n\
\   address.sin_port = htons(portNo);            // Set Internet Socket (sin), Port to receive on\n\
\n\
\   if (isMulticast)\n\
\   {\n\
\      /* Enable socket reuse to enable multiple applications to receive copies of the multicast datagrams */\n\
\      setsockopt(*sock, SOL_SOCKET, SO_REUSEADDR, (char *)&reuse, sizeof(reuse));\n\
\   }\n\
\n\
\   // Bind our open socket to a free port on the localhost, with our defined IP address\n\
\   if (bind(*sock, (struct sockaddr *)&address, sizeof(address))==-1)\n\
\   {\n\
\      printf(\"Bind failed\\n\");\n\
\      exit(0);\n\
\   }\n\
\n\
\   if (isMulticast)\n\
\   {\n\
\      imreq.imr_multiaddr.s_addr = inet_addr(addr);\n\
\      imreq.imr_interface.s_addr = INADDR_ANY; // use DEFAULT interface\n\
\n\
\      /* Join multicast group on default interface */\n\
\      setsockopt(*sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (const void *)&imreq, sizeof(struct ip_mreq));\n\
\   }\n\
\n\
}\n\
\n

PosixAPOSBindWriterC.CreateTxSocket_Body=\
void create_tx_socket()\n\
{\n\
\   /* TODO - this is a fudge, but lose messages without it */\n\
\   int Size = (65507 + 1500) * 6;\n\
\n\
\   /* Create a transmit socket */\n\
\   txSock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n\
\n\
\   /* TODO - this is a fudge, but lose messages without it */\n\
\   if (setsockopt(txSock, SOL_SOCKET, SO_SNDBUF, &Size, sizeof(Size)) < 0)\n\
\      printf(\"failed set size for txSock \\n\");\n\
}\n\
\n

PosixAPOSBindWriterC.SetupTxSocket_Body=\
void setup_tx_addr(struct sockaddr_in *sockAddr, char *ip, int portNo)\n\
{\n\
\   /* Create a destination sockaddr endpoint for each protection domain */\n\
\   memset(sockAddr, 0, sizeof(*sockAddr)); // Clear the data structure to zero\n\
\   sockAddr->sin_family = AF_INET; // Set Internet Socket (sin), Family to: Address Family (AF) IPv4 (INET)\n\
\n\
\   if (inet_aton(ip, &(sockAddr->sin_addr))==-1)\n\
\   {\n\
\      printf(\"inet_aton failed\\n\");\n\
\   }\n\
\n\
\   sockAddr->sin_port = htons(portNo); // Set Internet Socket (sin), Port to send to\n\
}\n\
\n

PosixAPOSBindWriterC.TimerSigHandler_Body=\
\void Timer_Sig_Handler()\n\
{\n\
\   int i;\n\
\   siginfo_t si;\n\
\   timer_t *sysTimerID;\n\
\   int  timerID;\n\
\   Send_Message_Queue_Status_Type smqStatus;\n\
\n\
\   while (1)\n\
\   {\n\
\      // Wait on the signal set (which only has one signal in it)\n\
\      if (sigwaitinfo(&set, &si) >= 0)\n\
\      {\n\
\         sysTimerID = (timer_t*)si.si_value.sival_ptr;\n\
\n\
\         // find the index in the timer list as this is ued as the timer id for\n\
\         // the rest of the sytem.\n\
\         for (i = 0; i <= TIMER_LIST_SIZE; i++)\n\
\         {\n\
\            if (timerList[i].timerID == *sysTimerID)\n\
\            {\n\
\               timerID = i;\n\
\               break;\n\
\            }\n\
\         }\n\
\n\
\//       printf(\"Timer_Sig_Handler caught timer %d id = 0x%lx\\n\", timerID, (long)(*sysTimerID));\n\
\n\
\         // Post the timer id to the Wait_For_Event queue...\n\
\         Send_Message_Queue(Wait_For_Event__QueueID,\n\
\            &timerID,\n\
\            sizeof(timerID),\n\
\            &smqStatus);\n\
\      }\n\
\      else\n\
\      {\n\
\         printf(\"sigwaitinfo failed - errno = %d\\n\", errno);\n\
\      }\n\
\   }\n\
}\n\
\n

PosixAPOSBindWriterC.SetupSigHandler_Body=\
void setup_signal_handler()\n\
\{\n\
\   // Setup message queue for Wait_For_Event\n\
\   Create_Message_Queue_Status_Type CMQ_Status;\n\
\n\
\   /* Create the Wait_For_Event Message Queue */\n\
\   Create_Message_Queue(100,\n\
\      sizeof(int),\n\
\      &Wait_For_Event__QueueID,\n\
\      &CMQ_Status);\n\
\n\
\   // Setup timer signal handler\n\
\   int smStatus = 0;\n\
\n\
\   sigemptyset(&set);\n\
\   sigaddset(&set, SIGRTMIN);\n\
\   // Block this signal set for all threads in the process\n\
\   // This will mean any signals in the set (just one in this case) will get queued\n\
\   // until the signal handler thread handles them - using sigwait\n\
\   smStatus = pthread_sigmask(SIG_BLOCK, &set, NULL);\n\
\   if (smStatus != 0)\n\
\   {\n\
\      printf(\"failed to set sigmask\\n\");\n\
\   }\n\
\n\
\   // Create the signal handler thread\n\
\   int threadID = 0;\n\
\   Create_Thread_Status_Type status;\n\
\   Thread_Attr_Type threadAttr;\n\
\   threadAttr.Sched_Policy = Sched_FIFO;\n\
\   threadAttr.Sched_Priority = 240;\n\
\   threadAttr.Stack_Size = 200000;\n\
\n\
\   Create_Thread(&threadAttr, &Timer_Sig_Handler, NULL, &threadID, &status);\n\
\}\n\
\n 

PosixAPOSBindWriterC.ScaleThreadPriority_Header=\
int Scale_ThreadPriority\n\
\   (unsigned char Thread_Priority,\n\
\    int Sched_Policy);\n

PosixAPOSBindWriterC.ScaleThreadPriority_Body=\
int Scale_ThreadPriority\n\
\   (unsigned char Thread_Priority,\n\
\    int Sched_Policy)\n\
{\n\
\   int thrdPriority,\n\
\   priMin = sched_get_priority_min(Sched_Policy),\n\
\   priMax = sched_get_priority_max(Sched_Policy);\n\
\   /* Convert ECOA Thread_Priority (0..255) into POSIX thrdPriority (priMin..priMax) */\n\
\   thrdPriority = priMin + ((int)Thread_Priority * (priMax - priMin) / 255);\n\
\   return thrdPriority;\n\
}\n\
\n
             
PosixAPOSBindWriterC.APOSTypes_Header=\
enum SMNB_Status_Enum\n\
{\n\
\   Non_Blocking_Message_Sent_OK,\n\
\   Invalid_Send_Non_Blocking_VC,\n\
\   Invalid_Send_Non_Blocking_Buffer,\n\
\   Invalid_Send_Non_Blocking_Length,\n\
\   Send_Non_Blocking_Comms_Failure,\n\
\   Send_Non_Blocking_Buffer_Unavailable,\n\
\   Invalid_Send_Message_Non_Blocking_Param\n\
};\n\
typedef enum SMNB_Status_Enum SMNB_Status_Type;\n\
\n\
enum RM_Status_Enum\n\
{\n\
\   Blocking_Message_Received_OK,\n\
\   Received_Blocking_Buffer_Overflow,\n\
\   Received_Blocking_Timeout,\n\
\   Invalid_Receive_Blocking_VC,\n\
\   Invalid_Receive_Blocking_Buffer,\n\
\   Invalid_Receive_Blocking_Length,\n\
\   Invalid_Receive_Blocking_Timeout,\n\
\   Receive_Blocking_Comms_Failure,\n\
\   Receive_Blocking_Timer_Failure,\n\
\   Invalid_Receive_Message_Param\n\
};\n\
typedef enum RM_Status_Enum RM_Status_Type;\n\
\n\
struct Time_Struct\n\
{\n\
\   unsigned int Seconds;\n\
\   unsigned int Nanoseconds;\n\
};\n\
typedef struct Time_Struct Time_Type;\n\
\n\
#define MAX_NANOSECONDS 999999999\n\
#define MAX_SECONDS 2147483647\n\
\n\
// Defines the status returned from the APOS procedure when creating a semaphore.\n\
enum Create_Semaphore_Status_Enum\n\
\   {Create_Semaphore_OK,\n\
\    Create_Semaphore_Invalid_Semaphore_Value,\n\
\    Create_Semaphore_Invalid_Initial_Value,\n\
\    Create_Semaphore_Invalid_Max_Value,\n\
\    Create_Semaphore_Invalid_Queuing_Policy,\n\
\    Create_Semaphore_Max_Number_Of_Semaphores_Reached,\n\
\    Create_Semaphore_Invalid_Param\n\
};\n\
typedef enum Create_Semaphore_Status_Enum Create_Semaphore_Status_Type;\n\
\n\
// Defines the status returned from the APOS procedure when deleting a semaphore.\n\
enum Delete_Semaphore_Status_Enum\n\
\   {Delete_Semaphore_OK,\n\
\    Delete_Semaphore_Invalid_Semaphore_ID,\n\
\    Delete_Semaphore_Semaphore_Busy,\n\
\    Delete_Semaphore_Invalid_Param\n\
};\n\
typedef enum Delete_Semaphore_Status_Enum Delete_Semaphore_Status_Type;\n\
\n\
\// Defines the status returned from the APOS procedure when waiting for a semaphore.\n\
enum Wait_For_Semaphore_Status_Enum\n\
\   {Wait_For_Semaphore_OK,\n\
\    Wait_For_Semaphore_Semaphore_Unavailable,\n\
\    Wait_For_Semaphore_Invalid_Semaphore_ID,\n\
\    Wait_For_Semaphore_Invalid_Timeout,\n\
\    Wait_For_Semaphore_Timer_Unavailable,\n\
\    Wait_For_Semaphore_Timeout_Expired,\n\
\    Wait_For_Semaphore_Failed,\n\
\    Wait_For_Semaphore_Invalid_Param\n\
};\n\
typedef enum Wait_For_Semaphore_Status_Enum Wait_For_Semaphore_Status_Type;\n\
\n\
// Defines the status returned from the APOS procedure when posting a semaphore.\n\
enum Post_Semaphore_Status_Enum\n\
\   {Post_Semaphore_OK,\n\
\    Post_Semaphore_Invalid_Semaphore_ID,\n\
\    Post_Semaphore_Invalid_Timer,\n\
\    Post_Semaphore_Exceeded_Semaphore_Value,\n\
\    Post_Semaphore_Failed,\n\
\    Post_Semaphore_Invalid_Param\n\
};\n\
typedef enum Post_Semaphore_Status_Enum Post_Semaphore_Status_Type;\n\
\n\
enum Queuing_Discipline_Enum\n\
{\n\
\   Queuing_Discipline_FIFO,\n\
\   Queuing_Discipline_Priority\n\
};\n\
typedef enum Queuing_Discipline_Enum Queuing_Discipline_Type;\n\
\n\
enum Create_Timer_Status_Enum\n\
{\n\
\   Create_Timer_OK,\n\
\   Create_Timer_Invalid_Time,\n\
\   Create_Timer_Resource_Not_Available,\n\
\   Invalid_Create_Timer_Param\n\
};\n\
typedef enum Create_Timer_Status_Enum Create_Timer_Status_Type;\n\
\n\
enum Start_Timer_Status_Enum\n\
{\n\
\   Start_Timer_OK,\n\
\   Start_Timer_Already_Running,\n\
\   Start_Timer_Invalid_Timer,\n\
\   Start_Timer_Failed,\n\
\   Invalid_Start_Timer_Param\n\
};\n\
typedef enum Start_Timer_Status_Enum Start_Timer_Status_Type;\n\
\n\
\enum Stop_Timer_Status_Enum\n\
\{\n\
\   Stop_Timer_OK,\n\
\   Stop_Timer_Already_Stopped,\n\
\   Stop_Timer_Invalid_Timer,\n\
\   Stop_Timer_Failed,\n\
\   Invalid_Stop_Timer_Param\n\
};\n\
typedef enum Stop_Timer_Status_Enum Stop_Timer_Status_Type;\n\
\n\
enum Delete_Timer_Status_Enum\n\
\   {\n\
\   Delete_Timer_OK,\n\
\   Delete_Timer_Still_Running,\n\
\   Delete_Timer_Invalid_Timer,\n\
\   Invalid_Delete_Timer_Param\n\
};\n\
typedef enum Delete_Timer_Status_Enum Delete_Timer_Status_Type;\n\
\n\
enum Event_Enum\n\
{\n\
\   Event_Timer,\n\
\   Event_Thread_Self_Exit,\n\
\   Event_Thread_Destroyed\n\
};\n\
typedef enum Event_Enum Event_Type;\n\
\n\
enum WFE_Status_Enum\n\
{\n\
\   Wait_For_Event_OK,\n\
\   Wait_For_Event_Failed,\n\
\   Wait_For_Event_Invalid_Param\n\
};\n\
typedef enum WFE_Status_Enum WFE_Status_Type;\n\
\n\
enum Sched_Policy_Enum\n\
{\n\
\   Sched_FIFO,\n\
\   Sched_RR,\n\
\   Sched_Other\n\
};\n\
typedef enum Sched_Policy_Enum Sched_Policy_Type;\n\
\n\
struct Thread_Attr_Struct\n\
{\n\
\   Sched_Policy_Type Sched_Policy;\n\
\   unsigned char Sched_Priority;\n\
\   unsigned int Stack_Size;\n\
};\n\
typedef struct Thread_Attr_Struct Thread_Attr_Type;\n\
\n\
enum Create_Thread_Status_Enum\n\
{\n\
\   Create_Thread_Call_OK,\n\
\   Create_Thread_Max_Number_Threads_Exceeded,\n\
\   Create_Thread_Out_Of_Memory,\n\
\   Create_Thread_Invalid_Policy,\n\
\   Create_Thread_Invalid_Priority,\n\
\   Create_Thread_Invalid_Stack_Size,\n\
\   Create_Thread_Invalid_Entry_Point,\n\
\   Create_Thread_Invalid_Param\n\
};\n\
typedef enum Create_Thread_Status_Enum Create_Thread_Status_Type;\n
